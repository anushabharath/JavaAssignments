package com.wipro.app;
/*class Node {
    int data;
    Node next;
}

public class LinkedListInsertion {
    public static void main(String[] args) {
        // Create an empty linked list
        Node head = null;

        // Insert elements at the beginning
        head = insertAtBeginning(head, 10);
        head = insertAtBeginning(head, 20);
        head = insertAtBeginning(head, 30);

        // Insert elements at the end
        head = insertAtEnd(head, 40);
        head = insertAtEnd(head, 50);

        // Insert an element at a specific position
        head = insertAtPosition(head, 25, 3);

        // Print the linked list
        printLinkedList(head);
    }

    // Insert at the beginning
    static Node insertAtBeginning(Node head, int data) {
        Node newNode = new Node();
        newNode.data = data;
        newNode.next = head;
        return newNode;
    }

    // Insert at the end
    static Node insertAtEnd(Node head, int data) {
        Node newNode = new Node();
        newNode.data = data;
        newNode.next = null;

        if (head == null) {
            return newNode;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
        return head;
    }

    // Insert at a specific position
    static Node insertAtPosition(Node head, int data, int position) {
        Node newNode = new Node();
        newNode.data = data;

        if (position < 1) {
            System.out.println("Invalid position!");
            return head;
        }

        if (position == 1) {
            newNode.next = head;
            return newNode;
        }

        Node current = head;
        for (int i = 1; i < position - 1; i++) {
            if (current == null) {
                System.out.println("Invalid position!");
                return head;
            }
            current = current.next;
        }

        if (current == null) {
            System.out.println("Invalid position!");
            return head;
        }

        newNode.next = current.next;
        current.next = newNode;
        return head;
    }

    // Print the linked list
    static void printLinkedList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
    }
}*/
import java.util.Scanner;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedListInsertion {
    static Node head; // head of the linked list

    // Method to insert a node at the beginning of the linked list
    static void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Method to insert a node at the end of the linked list
    static void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // Method to insert a node at a specified position in the linked list
    static void insertAtPosition(int data, int position) {
        if (position < 1) {
            System.out.println("Invalid position. Position should be >= 1.");
            return;
        }
        Node newNode = new Node(data);
        if (position == 1) {
            newNode.next = head;
            head = newNode;
            return;
        }
        Node current = head;
        for (int i = 1; i < position - 1 && current != null; i++) {
            current = current.next;
        }
        if (current == null) {
            System.out.println("Invalid position. Position is beyond the length of the list.");
        } else {
            newNode.next = current.next;
            current.next = newNode;
        }
    }

    // Method to display the linked list
    static void displayLinkedList() {
        Node current = head;
        if (current == null) {
            System.out.println("Linked List is empty");
            return;
        }
        System.out.print("Linked List: ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements to insert: ");
        int n = scanner.nextInt();

        // Insert elements at the beginning based on user input
        System.out.println("Enter " + n + " elements to insert at the beginning:");
        for (int i = 0; i < n; i++) {
            int data = scanner.nextInt();
            insertAtBeginning(data);
        }

        // Insert elements at the end based on user input
        System.out.println("Enter " + n + " elements to insert at the end:");
        for (int i = 0; i < n; i++) {
            int data = scanner.nextInt();
            insertAtEnd(data);
        }

        // Insert element at a specific position based on user input
        System.out.print("Enter data to insert: ");
        int data = scanner.nextInt();
        System.out.print("Enter position to insert (1 to " + (2*n) + "): ");
        int position = scanner.nextInt();
        insertAtPosition(data, position);

        // Display the linked list
        displayLinkedList();

        scanner.close();
    }
}


