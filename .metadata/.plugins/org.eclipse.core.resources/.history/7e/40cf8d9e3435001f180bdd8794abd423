package com.wipro.app;

/*public class Queue {
    int length = 5;
    int items[] = new int[length];
    int front = -1;
    int rear = -1;
    boolean isFull() {
        if (rear == length - 1) {
            return true;
        } else {
            return false;
        }
    }
    boolean isEmpty() {
        if (front == -1 && rear == -1) {
            return true;
        } else {
            return false;
        }
    }

    void enQueue(int itemValue) {
        if (isFull()) {
            System.out.println("Queue is full");
        } else if (front == -1 && rear == -1) {
            front = rear = 0;
            items[rear] = itemValue;
        } else {
            rear++;
            items[rear] = itemValue;
        }
    }
   
void deQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Nothing to dequeue");
        } else if (front == rear) {
            front = rear = -1;
        } else {
            front++;
        }
    }
    void display() {
        int i;
        if (isEmpty()) {
            System.out.println("Queue is empty");
        } else {
            for (i = front; i <= rear; i++) {
                System.out.println(items[i]);
            }
        }
    }
    void peak() {
        System.out.println("Front value is: " + items[front]);
    }

    public static void main(String[] args) {
        Queue obj = new Queue();
        obj.enQueue(5);
        obj.enQueue(4);
        obj.enQueue(3);
        obj.enQueue(2);
        obj.enQueue(1);

        obj.display();
        obj.peak();

    }
}*/

public class Queue {
 private int[] arr;
 private int front;
 private int rear;
 private int capacity;
 private int size;

 // Constructor to initialize the queue
 public Queue(int capacity) {
     this.capacity = capacity;
     arr = new int[capacity];
     front = 0;
     rear = -1;
     size = 0;
 }

 // Insert an element at the rear of the queue
 public void enqueue(int item) {
     if (isFull()) {
         System.out.println("Queue is full");
         return;
     }
     rear = (rear + 1) % capacity;
     arr[rear] = item;
     size++;
 }

 // Remove and return the element from the front of the queue
 public int dequeue() {
     if (isEmpty()) {
         System.out.println("Queue is empty");
         return -1;
     }
     int removedItem = arr[front];
     front = (front + 1) % capacity;
     size--;
     return removedItem;
 }

 // Return the element at the front of the queue without removing it
 public int peek() {
     if (isEmpty()) {
         System.out.println("Queue is empty");
         return -1;
     }
     return arr[front];
 }

 // Check if the queue is empty
 public boolean isEmpty() {
     return size == 0;
 }

 // Check if the queue is full
 public boolean isFull() {
     return size == capacity;
 }



 public static void main(String[] args) {
     Queue queue = new Queue(5);
     queue.enqueue(10);
     queue.enqueue(20);
     queue.enqueue(30);

     System.out.println("Dequeued item: " + queue.dequeue());
     System.out.println("Front item: " + queue.peek());
     System.out.println("Is queue empty? " + queue.isEmpty());
 }
}
