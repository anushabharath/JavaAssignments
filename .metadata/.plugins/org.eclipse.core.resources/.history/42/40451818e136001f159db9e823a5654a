package com.wipro.app;
public class LinkedList {
    // Define the Node class as an inner class
    private class Node {
        int data;
        Node next;

        // Constructor to initialize the node with data and set next as null
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }
 // Head of the list
    private Node head;

    // Constructor to initialize the head of the list as null
    public LinkedList() {
        this.head = null;
    }

    // Method to insert a new node with given data at the end of the list
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    // Method to insert a new node with given data at the beginning of the list
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Method to insert a new node with given data after a specific node
    public void insertAfter(Node prevNode, int data) {
        if (prevNode == null) {
            System.out.println("The given previous node cannot be null");
            return;
        }
        Node newNode = new Node(data);
        newNode.next = prevNode.next;
        prevNode.next = newNode;
    }
    // Method to delete a node with given key
    public void deleteNode(int key) {
        Node temp = head, prev = null;

        // If the head node itself holds the key to be deleted
        if (temp != null && temp.data == key) {
            head = temp.next; // Changed head
            return;
        }

        // Search for the key to be deleted, keep track of the previous node
        while (temp != null && temp.data != key) {
            prev = temp;
            temp = temp.next;
        }

        // If key was not present in the list
        if (temp == null) return;

        // Unlink the node from linked list
        prev.next = temp.next;
    }

    // Method to print all the elements of the list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Main method to demonstrate the LinkedList operations
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // Inserting elements into the list
        list.insertAtEnd(1);
        list.insertAtEnd(2);
        list.insertAtBeginning(0);
        list.insertAtEnd(4);
        list.insertAtEnd(5);

        // Printing the list
        System.out.print("Linked List: ");
        list.printList();

        // Deleting an element from the list
        list.deleteNode(2);
        System.out.print("After deletion of 2: ");
        list.printList();

        // Inserting after a specific node
        list.insertAfter(list.head.next, 3);
        System.out.print("After inserting 3 after 1: ");
        list.printList();
    }
}