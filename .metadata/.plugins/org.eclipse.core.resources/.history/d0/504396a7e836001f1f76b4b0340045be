import java.util.Scanner;

public class Queue {
    private int queueLength;  // Size of the queue
    private int[] items;      // Array to store queue elements
    private int front;
    private int back;

    // Constructor to initialize the queue with user-defined size
    public Queue(int queueLength) {
        this.queueLength = queueLength;
        this.items = new int[queueLength];
        this.front = -1;
        this.back = -1;
    }

    // Method to check if the queue is full
    public boolean isFull() {
        return back == queueLength - 1;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return front == -1 && back == -1;
    }

    // Method to add an element to the queue (enqueue operation)
    public void enQueue(int itemValue) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue.");
        } else if (isEmpty()) {
            front = back = 0;
            items[back] = itemValue;
        } else {
            back++;
            items[back] = itemValue;
        }
    }

    // Method to remove an element from the queue (dequeue operation)
    public void deQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Nothing to dequeue.");
        } else if (front == back) {
            front = back = -1;
        } else {
            front++;
        }
    }

    // Method to display the elements of the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            System.out.println("Queue elements:");
            for (int i = front; i <= back; i++) {
                System.out.println(items[i]);
            }
        }
    }

    // Method to peek at the front element of the queue
    public void peek() {
        if (!isEmpty()) {
            System.out.println("Front value is: " + items[front]);
        } else {
            System.out.println("Queue is empty. No front value to peek.");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the size of the queue from the user
        System.out.print("Enter the size of the queue: ");
        int size = scanner.nextInt();

        // Create a queue object
        Queue myQueue = new Queue(size);

        // Menu-driven loop to perform queue operations
        int choice;
        do {
            System.out.println("\nQueue Operations:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter element to enqueue: ");
                    int item = scanner.nextInt();
                    myQueue.enQueue(item);
                    break;
                case 2:
                    myQueue.deQueue();
                    break;
                case 3:
                    myQueue.peek();
                    break;
                case 4:
                    myQueue.display();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
                    break;
            }

        } while (choice != 5);

        scanner.close();
    }
}
