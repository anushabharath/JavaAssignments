package com.wipro.app;

/*

//Define the LinkedList class
class LinkedList {
 Node head;
//Define the Node class
class Node {
int data;
Node next;

// Constructor to initialize the node with data and set next as null
Node(int data) {
    this.data = data;
    this.next = null;
}
}

 // Constructor to initialize the head of the list as null
 LinkedList() {
     this.head = null;
 }

 // Method to add a new node with given data at the end of the list
 public void add(int data) {
     Node newNode = new Node(data);

     if (head == null) {
         head = newNode;
     } else {
         Node current = head;
         while (current.next != null) {
             current = current.next;
         }
         current.next = newNode;
     }
 }

 // Method to print all the elements of the list
 public void printList() {
     Node current = head;
     while (current != null) {
         System.out.print(current.data + " ");
         current = current.next;
     }
     System.out.println();
 }

 // Method to delete a node with given key
 public void delete(int key) {
     Node current = head, prev = null;

     if (current != null && current.data == key) {
         head = current.next;
         return;
     }

     while (current != null && current.data != key) {
         prev = current;
         current = current.next;
     }

     if (current == null) return;

     prev.next = current.next;
 }

 // Method to search for a node with given key
 public boolean search(int key) {
     Node current = head;
     while (current != null) {
         if (current.data == key) {
             return true;
         }
         current = current.next;
     }
     return false;
 }

 public static void main(String[] args) {
     LinkedList list = new LinkedList();

     // Adding elements to the list
     list.add(1);
     list.add(2);
     list.add(3);
     list.add(4);

     // Printing the list
     System.out.print("Linked List: ");
     list.printList();

     // Deleting an element from the list
     list.delete(3);
     System.out.print("After deletion of 3: ");
     list.printList();

     // Searching for an element in the list
     System.out.println("Search for 2: " + list.search(2));
     System.out.println("Search for 5: " + list.search(5));
 }
}
*/
public class LinkedList {
    Node head; // head of the list

    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    // Method to insert a new node
    public static LinkedList insert(LinkedList list, int data) {
        // Create a new node with given data
        Node new_node = new Node(data);    // creating object of Node class
        new_node.next = null;

        // If the Linked List is empty, then make the new node as head
        if (list.head == null) {
            list.head = new_node;
        } else {
            // Else traverse till the last node and insert the new_node there
            Node last = list.head;
            while (last.next != null) {
                last = last.next;
            }

            // Insert the new_node at last node
            last.next = new_node;
        }

        // Return the list by head
        return list;
    }

    // Method to print the LinkedList.
    public static void printList(LinkedList list) {
        Node currNode = list.head;

        System.out.print("LinkedList: ");

        // Traverse through the LinkedList
        while (currNode != null) {
            // Print the data at current node
            System.out.print(currNode.data + " ");

            // Go to next node
            currNode = currNode.next;
        }
    }

    // main method to test the above methods
    public static void main(String[] args) {
        /* Start with the empty list. */
        LinkedList list = new LinkedList();

        // Insert the values
        list = insert(list, 111);
        list = insert(list, 222);
        list = insert(list, 333);
        list = insert(list, 444);
        list = insert(list, 555);

        // Print the LinkedList
        printList(list);
    }
}
public class LinkedListExample {
    Node head; // head of the list

    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    // Method to insert a new node
    public static LinkedListExample insert(LinkedListExample list, int data) {
        // Create a new node with given data
        Node new_node = new Node(data);    // creating object of Node class
        new_node.next = null;

        // If the Linked List is empty, then make the new node as head
        if (list.head == null) {
            list.head = new_node;
        } else {
            // Else traverse till the last node and insert the new_node there
            Node last = list.head;
            while (last.next != null) {
                last = last.next;
            }

            // Insert the new_node at last node
            last.next = new_node;
        }

        // Return the list by head
        return list;
    }

    // Method to print the LinkedList.
    public static void printList(LinkedListExample list) {
        Node currNode = list.head;

        System.out.print("LinkedList: ");

        // Traverse through the LinkedList
        while (currNode != null) {
            // Print the data at current node
            System.out.print(currNode.data + " ");

            // Go to next node
            currNode = currNode.next;
        }
    }

    // main method to test the above methods
    public static void main(String[] args) {
        /* Start with the empty list. */
        LinkedListExample list = new LinkedListExample();

        // Insert the values
        list = insert(list, 111);
        list = insert(list, 222);
        list = insert(list, 333);
        list = insert(list, 444);
        list = insert(list, 555);

        // Print the LinkedList
        printList(list);
    }
}
public class LinkedListExample {
    Node head; // head of the list

    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    // Method to insert a new node
    public static LinkedListExample insert(LinkedListExample list, int data) {
        // Create a new node with given data
        Node new_node = new Node(data);    // creating object of Node class
        new_node.next = null;

        // If the Linked List is empty, then make the new node as head
        if (list.head == null) {
            list.head = new_node;
        } else {
            // Else traverse till the last node and insert the new_node there
            Node last = list.head;
            while (last.next != null) {
                last = last.next;
            }

            // Insert the new_node at last node
            last.next = new_node;
        }

        // Return the list by head
        return list;
    }

    // Method to print the LinkedList.
    public static void printList(LinkedListExample list) {
        Node currNode = list.head;

        System.out.print("LinkedList: ");

        // Traverse through the LinkedList
        while (currNode != null) {
            // Print the data at current node
            System.out.print(currNode.data + " ");

            // Go to next node
            currNode = currNode.next;
        }
    }

    // main method to test the above methods
    public static void main(String[] args) {
        /* Start with the empty list. */
        LinkedListExample list = new LinkedListExample();

        // Insert the values
        list = insert(list, 111);
        list = insert(list, 222);
        list = insert(list, 333);
        list = insert(list, 444);
        list = insert(list, 555);

        // Print the LinkedList
        printList(list);
    }
}
























